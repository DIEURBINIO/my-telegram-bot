import random
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8036801420:AAE1OcHvCHK2lL0_iX0kRVl1G2ld9v3dFMg"

# === –ö–ù–û–ü–ö–ò ===
main_menu = ReplyKeyboardMarkup(
    [["üìÖ –°–∫–æ–ª—å–∫–æ —è –ø—Ä–æ–∂–∏–ª", "üéÇ –î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"], ["üíÄ –ü—Ä–æ–≥–Ω–æ–∑ –∂–∏–∑–Ω–∏"]],
    resize_keyboard=True
)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ü–£–°–ö–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ:",
        reply_markup=main_menu
    )

# === –†–ê–°–ß–Å–¢ –ü–†–û–ñ–ò–¢–´–• –î–ù–ï–ô ===
async def lived_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    context.user_data["action"] = "lived_days"

# === –†–ê–°–ß–Å–¢ –î–ù–ï–ô –î–û –î–† ===
async def to_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    context.user_data["action"] = "to_birthday"

# === –§–ê–ù–û–í–´–ô –ü–†–û–ì–ù–û–ó ===
async def death_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    context.user_data["action"] = "death_prediction"

# === –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–¢–´ ===
async def handle_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_str = update.message.text
        birth_date = datetime.strptime(date_str, "%d.%m.%Y")
        action = context.user_data.get("action")

        if action == "lived_days":
            days = (datetime.now() - birth_date).days
            await update.message.reply_text(f"–í—ã –ø—Ä–æ–∂–∏–ª–∏ {days} –¥–Ω–µ–π! üóì")

        elif action == "to_birthday":
            today = datetime.now()
            next_birthday = datetime(year=today.year, month=birth_date.month, day=birth_date.day)
            if next_birthday < today:
                next_birthday = datetime(year=today.year + 1, month=birth_date.month, day=birth_date.day)
            days_left = (next_birthday - today).days
            await update.message.reply_text(f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π üéâ")

        elif action == "death_prediction":
            life_expectancy = random.randint(50, 100)
            death_date = birth_date + timedelta(days=life_expectancy * 365)
            remaining = death_date - datetime.now()

            years = remaining.days // 365
            months = (remaining.days % 365) // 30
            days = (remaining.days % 365) % 30
            hours = remaining.seconds // 3600

            await update.message.reply_text(
                f"–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {years} –ª–µ—Ç, {months} –º–µ—Å—è—Ü–µ–≤, {days} –¥–Ω–µ–π –∏ {hours} —á–∞—Å–æ–≤.\n"
                f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ —Å–º–µ—Ä—Ç–∏: {death_date.strftime('%d.%m.%Y')} üíÄ"
            )

        context.user_data["action"] = None

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì).")

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìÖ –°–∫–æ–ª—å–∫–æ —è –ø—Ä–æ–∂–∏–ª":
        await lived_days(update, context)
    elif text == "üéÇ –î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è":
        await to_birthday(update, context)
    elif text == "üíÄ –ü—Ä–æ–≥–Ω–æ–∑ –∂–∏–∑–Ω–∏":
        await death_prediction(update, context)

# === –ó–ê–ü–£–°–ö ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìÖ –°–∫–æ–ª—å–∫–æ —è –ø—Ä–æ–∂–∏–ª"), button_handler))
    app.add_handler(MessageHandler(filters.Regex("üéÇ –î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"), button_handler))
    app.add_handler(MessageHandler(filters.Regex("üíÄ –ü—Ä–æ–≥–Ω–æ–∑ –∂–∏–∑–Ω–∏"), button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date))

    app.run_polling()

if __name__ == "__main__":
    main()
